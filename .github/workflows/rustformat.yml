# name: Auto Format Rust Code

# on: [pull_request]

# permissions:
#   contents: write

# jobs:
#   auto-format:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           token: ${{ secrets.GITHUB_TOKEN }}
#           ref: ${{ github.event.pull_request.head.ref }}  # Ensure we check out the PR branch

#       - name: Install Rust
#         uses: dtolnay/rust-toolchain@stable
#         with:
#           components: rustfmt

#       - name: Format code
#         run: cargo fmt

#       - name: Commit changes
#         run: |
#           git config --global user.name "github-actions[bot]"
#           git config --global user.email "github-actions[bot]@users.noreply.github.com"
#           git add .
#           git diff --quiet && git diff --staged --quiet || git commit -m "auto format"
#           git commit --amend --no-edit
#           git push origin HEAD:${{ github.event.pull_request.head.ref }}
          
# git commit --amend --no-edit
      # - name: Commit changes (single commit only)
      #   run: |
      #     git config --global user.name "github-actions[bot]"
      #     git config --global user.email "github-actions[bot]@users.noreply.github.com"
      #     git add .

      #     git diff --quiet && git diff --staged --quiet || git commit -m "auto format"

      #     git push --force-with-lease origin HEAD:${{ github.event.pon: pull_request
name: "Test Suite"
on:
  push:
  pull_request:

jobs:
  formatting:
    name: cargo fmt
    runs-on: ubuntu-latest
    permissions: 
      contents: write
    steps:
      - uses: actions/checkout@v4
      # Ensure rustfmt is installed and setup problem matcher
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
      - name: Rustfmt Check
        uses: actions-rust-lang/rustfmt@v1
